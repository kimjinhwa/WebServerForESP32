
  // doc_tx["time"] = 1351824120;
  // doc_tx["type"] = "modbus";
  // JsonArray modbusValues = doc_tx.createNestedArray("value");
  //  for (int i = 0; i < 60; i++)
  //  {
  //    modbusValues.add(modBusData[i]);
  //  }

  // String des;
  // serializeJson(doc_tx, des);
  // Serial.println(des);
  // FILE *fp = fopen("/spiffs/ipaddress.txt", "w+");
  // // serializeJson(doc_tx, fp);

  // fwrite(des.c_str(), sizeof(byte), des.length(), fp);
  // fclose(fp);

  // serializeJson(doc_tx, Serial);
  // Serial.println();

// Client.printf("\r\nipaddress %s", ipaddress.toString());
// Client.printf("gateway %s", gateway.toString());
// Client.printf("subnetmask %s", subnetmask.toString());
// Client.printf("dns1 %s", dns1.toString());
// Client.printf("dns2 %s", dns2.toString());
// Client.printf("websocketserver %s", websocketserver.toString());
// Client.printf("%d", webSocketPort);
  // struct timeval tmv;
  // struct tm *tm_info;
  // tmv.tv_sec = logData.logTime;
  // tmv.tv_usec = 0;
  // settimeofday(&tmv, NULL);
  // tm_info = localtime(&sb.st_mtime);
  // strftime(tbuffer, 80, "%d/%m/%Y %R", tm_info);

  // // FILE *file = fopen("/spiffs/eventLog.json", "r");
  // ifstream fin;
  // char line[120];
  // fin.open("/spiffs/eventLog.json");
  // if (!fin.is_open())
  // {
  //   Serial.println("There was an error opening the file");
  //   return;
  // };

  // while (fin.getline(line, 100))
  // {

  //   // Print line (read from file) in Console
  //   Serial.print(line);
  // }
  // fin.close();
  // // File file = LittleFS.open("/spiffs/eventLog.json", "r", true);
  //  SPIFFSFS vimpl;
  //  vimpl.open("/spiffs/eventLog.json","r",true);
  //  File file (vimpl.open("/spiffs/eventLog.json","r",true));//= File(new VFSImpl.open("/spiffs/eventLog.json","r",true)); //SD.open("/spiffs/eventLog.json");
  //  if (!file)
  //  {
  //    Serial.println("There was an error opening the file");
  //    return;
  //  }
  //  else
  //  {
  //    //   Serial.println("File opened!");

  //   //   StaticJsonDocument<512> doc;

  //   //   DeserializationError error = deserializeJson(doc, file);
  //   //   if (error)
  //   //   {
  //   //     Serial.println("error...");
  //   //   }
  //   //   else
  //   //   {
  //   //     serializeJson(doc_tx, Serial);
  //   //     Serial.println();
  //   //   }
  //   //   Serial.println("");
  // }
  // // fclose(file);
  std::mutex serial_mtx;

void setup() {
  Serial.begin(112500);
  xTaskCreate(vTask1, "Task 1", 10000, NULL, 1, NULL);
  xTaskCreate(vTask2, "Task 2", 10000, NULL, 1, NULL);
}

void loop() {}

void vTask1(void *pvParameters) {
  for (;;) {
    std::lock_guard<std::mutex> lck(serial_mtx);
    Serial.println("Task 1 is running");
  }
}

void vTask2(void *pvParameters) {
  for (;;) {
    std::lock_guard<std::mutex> lck(serial_mtx);
    Serial.println("Task 2 is running");
  }
}
// int log_printf_udp(const char *format, ...);
// int vprintf_udp(const char *fmt, va_list args);
// int log_printf_udp(const char *format, ...)
// {
//   int len;
//   va_list arg;
//   va_start(arg, format);
//   len = vprintf_udp(format, arg);
//   va_end(arg);
//   return len;
// };
// int vprintf_udp(const char *fmt, va_list args)
// {
//   char sendBuf[1024];
//   sprintf(sendBuf, fmt, args);
//   udp.broadcastTo(sendBuf, 1234);
//   return 0;
// };